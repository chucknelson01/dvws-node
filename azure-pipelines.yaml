# Starter pipeline

# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

variables:
  tag: '$(Build.BuildId)'
  resourceGroup: VisualStudioOnline-0D37EC9620C44920A0A23DF0A250A806
  imageRepository: chucknelson01/dvws-node
  dockerRegistryServiceConnection: ChuckDockerServiceConnection
  containerRegistry: $(dockerRegistryServiceConnection)
  repository: $(imageRepository)

pool:
  vmImage: ubuntu-latest

stages:
- stage: Build
  jobs:
  - job: Build
    steps:

        - task: Docker@2
          inputs:
            containerRegistry: $(dockerRegistryServiceConnection)
            repository: $(imageRepository)
            command: 'build'
            Dockerfile: '**/Dockerfile'
            tags: |
              $(tag)
              latest

       
        - task: CmdLine@2
          displayName: Trivy Vuln Scan
          inputs:
            script: |
              docker run --rm -v /var/run/docker.sock:/var/run/docker.sock -v $HOME/Library/Caches:/root/.cache/  -v "$(pwd):/src" aquasec/trivy image --exit-code 0 --severity HIGH,CRITICAL --format template --template "@contrib/junit.tpl" -o src/junit-report-high-crit.xml --ignore-unfixed $(imageRepository):$(tag)
        - task: PublishTestResults@2
          displayName: Publish Trivy Test Results
          inputs:
            testResultsFormat: "JUnit"
            testResultsFiles: "**/junit-report-*.xml"
          condition: succeededOrFailed()   
        - task: Docker@2
          inputs:
            containerRegistry: $(dockerRegistryServiceConnection)
            repository: $(imageRepository)
            command: 'Push'
            Dockerfile: '**/Dockerfile'
            tags: |
              $(tag)
              latest
          condition: succeededOrFailed()   
- stage: Deploy
  jobs:
  - job: RunTest
    workspace:
      clean: all
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - bash: |
        curl -L https://raw.githubusercontent.com/docker/compose-cli/main/scripts/install/install_linux.sh | sh
        docker login azure --client-id $(az-client-id) --client-secret $(az-client-secret) --tenant-id $(az-tenant-id)
        docker context list
        docker context create aci myaci3 --resource-group $(resourceGroup)
        docker context use myaci3
        docker context list        
        docker compose up -d    
    - task: AzureCLI@2
      inputs:
        azureSubscription: 'Azure subscription 1(1)(9a8bea91-580f-44d3-a896-81299b702ce4)'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
